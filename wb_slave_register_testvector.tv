// format:
//
//     <op>_<sel>_<addr>_<write data>_<expected output>
//
// where <op> is a 4 bit value, and can be one of the following:
//
//     0 - classic single read (<write data> ignored)
//     1 - classic single write (<expected output> ignored)
//     2 - read modfy write
//
// <sel> indicates where valid data is placed (each bit specifiec which byte is valid)
// and is DATA_WIDTH / GRANULE bits long
//
// <addr> is ADDR_WIDTH long (parameter to wb_slave_register)
// <write data> and <expected output> are both DATA_WIDTH (parameter to wb_slave_register)
//

// check that it's all zeroes initially
0_f_0000_xxxxxxxx_00000000
// write with some value
1_f_0000_11111111_xxxxxxxx
// read it back
0_f_0000_xxxxxxxx_11111111
// write two lower bytes
1_3_0000_22222222_xxxxxxxx
// read the whole thing, and only two lower bytes should be modified
0_f_0000_xxxxxxxx_11112222
// write two upper bytes
1_c_0000_33333333_xxxxxxxx
// read the whole thing, and only two upper bytes should be modified
0_f_0000_xxxxxxxx_33332222
// write upper- and lower-most bytes
1_9_0000_44444444_xxxxxxxx
// read the whole thing, and only the upper- and lower-most bytes should be modified
0_f_0000_xxxxxxxx_44332244
// do the RMW cycle
2_f_0000_55555555_44332244
// and a second one
2_f_0000_66666666_55555555
// now a single, normal read, to double check
0_f_0000_xxxxxxxx_66666666
